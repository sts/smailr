#############################################################################
# Smailr Exim Configuration

EXIM_CONF            = /etc/exim4

SQLITE_DATABASE_FILE = EXIM_CONF/smailr.sqlite

DKIM_SELECTOR        = mx

DKIM_DOMAIN          = ${lc:${domain:$h_from:}}

TEERGRUBE            = 25s

#############################################################################
# Database Queries

VIRTUAL_DOMAINS_SQL  = SELECT DISTINCT fqdn FROM domains WHERE fqdn = '${quote_sqlite:$domain}'
VIRTUAL_DOMAINS      = ${lookup sqlite{SQLITE_DATABASE_FILE VIRTUAL_DOMAINS_SQL}}

R_VIRTUAL_ALIASES_DATA_SQL = \
    SELECT aliases.dstlocalpart || '@' || aliases.dstdomain \
      FROM aliases, domains \
     WHERE aliases.localpart = '${quote_sqlite:$local_part}' \
       AND domains.fqdn = '${quote_sqlite:$domain}' \
       AND aliases.domain_id = domains.id

R_VIRTUAL_ALIASES_DATA = ${lookup sqlite {SQLITE_DATABASE_FILE R_VIRTUAL_ALIASES_DATA_SQL}{$value}fail}

R_VIRTUAL_MAILBOX_CONDITION_SQL = \
    SELECT '/srv/mail/users/' || domains.fqdn || '/' || mailboxes.localpart \
      FROM mailboxes, domains \
     WHERE mailboxes.localpart = '${quote_sqlite:$local_part}' \
       AND domains.fqdn        = '${quote_sqlite:$domain}' \
       AND mailboxes.domain_id = domains.id

R_VIRTUAL_MAILBOX_CONDITION = ${lookup sqlite{SQLITE_DATABASE_FILE R_VIRTUAL_MAILBOX_CONDITION_SQL}}

DKIM_PRIVATE_KEY_SQL = \
    SELECT private_key \
      FROM dkims, domains \
     WHERE dkims.selector  = 'mx' \
       AND domains.fqdn    = '${quote_sqlite:DKIM_DOMAIN}' \
       AND dkims.domain_id = domains.id

DKIM_PRIVATE_KEY = ${lookup sqlite{SQLITE_DATABASE_FILE DKIM_PRIVATE_KEY_SQL}{$value}fail}

################################################################################
# Domain Lists

domainlist local_domains    = @ : VIRTUAL_DOMAINS

domainlist relay_to_domains =

hostlist   relay_from_hosts =

#############################################################################
# Main Settings

smtp_banner               = $primary_hostname NO UCE/NO UBE ESMTP MTA

exim_user                 = Debian-exim
exim_group                = Debian-exim
never_users               = root

daemon_smtp_ports         = 25 : 465 : 587

tls_certificate           = /etc/exim4/exim.crt
tls_privatekey            = /etc/exim4/exim.key
tls_advertise_hosts       = *

split_spool_directory     = true

smtp_return_error_details = true

log_selector              = +subject \
                            +address_rewrite \
                            +connection_reject \
                            +delay_delivery \
                            +delivery_size \
                            +dnslist_defer \
                            +lost_incoming_connection \
                            +queue_run \
                            +received_recipients \
                            +sender_on_delivery \
                            +size_reject \
                            +smtp_confirmation \
                            +smtp_protocol_error \
                            +smtp_syntax_error \
                            +tls_cipher \
                            +tls_peerdn

# Maximum message size
message_size_limit        = 20M

# Number of unknown SMTP commands we accept before dropping the connection
smtp_max_unknown_commands = 10

# Drop the sender if they start spewing commands before getting the 220 response 
smtp_enforce_sync         = true

bounce_return_size_limit  = 10K

# These protections need to take into account MailScanners need to do
# MIME explosion.
check_spool_inodes        = 1000
check_spool_space         = 100M

# do a reverse DNS lookup on every connection
host_lookup = *

# No RFC 1413 (ident)-lookups
rfc1413_hosts = !*

# Make ESMTP PIPELINING available in all cases
pipelining_advertise_hosts = *

# A bit of good cop / bad cop with helo
helo_allow_chars        = "_"
helo_verify_hosts       = !*
helo_try_verify_hosts   = !*

# Reverse DNS information is useful
helo_lookup_domains     = *

# Send a notification about forzen messages at these intervals
delay_warning = 1h:2h:8h:24h:48h:72h

# Don't send a notification for messages with Precedence:bulk|list|junk
delay_warning_condition = "${if match{$h_precedence:}{(?i)bulk|list|junk}{no}{yes}}"

# Accept 8-bit MIME in Helo and Body.
accept_8bitmime

# Allow to manually specify a envelope-from when submitting local mail
local_from_check          = false
local_sender_retain       = true
untrusted_set_sender      = *

# Clamav socket
av_scanner = clamd:/var/run/clamav/clamd.ctl


#############################################################################
# ACL Configuration

# We use the following ACLs:
acl_smtp_connect  = acl_check_conn
acl_smtp_helo     = accept
acl_smtp_starttls = accept
acl_smtp_mail     = accept
acl_smtp_rcpt     = acl_check_rcpt
acl_smtp_data     = acl_check_data

# We dont allow VRFY/EXPN
acl_smtp_vrfy    = deny
acl_smtp_expn    = deny

begin acl

acl_check_conn:
    # Accept everything from localhost and trustworthy hosts
    accept hosts = : 127.0.0.1/8 : ::::1 : +relay_from_hosts

    # Play a bit of good/bad cop with senders, by delaying the initial 220
    # while enforcing SMTP protocol synchronization on both sides.
    accept delay = ${randint:5}s


acl_check_rcpt:
    # Accept everything from localhost
    accept hosts          = : 127.0.0.1/8 : ::::1

    # Deny if the local part contains @ or % or / or | or !. These are rarely
    # found in genuine local parts, but are often tried by people looking to
    # circumvent relaying restrictions.
    deny    local_parts   = ^.*[@%!/|] : ^\\.

    # Accept authenticated messages.
    accept  authenticated = *

    # Deny relaying on port 587 if not authenticated.
    deny   !authenticated = *
            condition     = ${if eq {$interface_port}{587} {yes}{no}}
            message       = Relaying denied. Proper authentication required on port 587.

    # Teergrube any borken reverse DNS entries.
    warn    message       = X-Broken-Reverse-DNS: no host name for IP address $sender_host_address
           !verify        = reverse_host_lookup
            delay         = TEERGRUBE

    # Check ip against RBLs
    deny    message       = REJECTED - ${sender_host_address} is blacklisted at $dnslist_domain ($dnslist_value); ${dnslist_text}
           !dnslists      = hostkarma.junkemailfilter.com=127.0.0.1,127.0.0.3
            dnslists      = zen.spamhaus.org/<;$sender_host_address;$sender_address_domain :\
                            hostkarma.junkemailfilter.com=127.0.0.2 :\
                            nomail.rhsbl.sorbs.net/$sender_address_domain
            delay         = TEERGRUBE

    # Accept if the address is in a local domain, but only if the recipient can
    # be verified. Otherwise deny. The "endpass" line is the border between
    # passing on to the next ACL statement (if tests above it fail) or denying
    # access (if tests below it fail).
    accept  domains       = +local_domains
            endpass
            verify        = recipient

    # Accept if the address is in a domain for which we are relaying, but again,
    # only if the recipient can be verified (this saves your secondary
    # MXes from accepting mail that they then can't send to your primary
    # MX)
    accept  domains       = +relay_to_domains
            endpass
            message       = unrouteable address
            verify        = recipient/callout=30s/callout_defer_ok

    accept  hosts         = +relay_from_hosts

    # Reaching the end of the ACL causes a "deny".
    deny    message       = <$local_part@$domain>: Relaying denied. Proper authentication required.
            delay         = TEERGRUBE


acl_check_data:

    # Accept if source is local SMTP (i.e. not over TCP/IP). We do this by
    # testing for an empty sending host field.
    accept  hosts         = :

    # Run clamav against the message and reject if it contains malware. This
    # acl condition will not deny if there is a problem with clamav.
    deny    message       = This message contains malware ($malware_name)
            malware       = */defer_ok

    accept



#############################################################################
# Router Configuration

begin routers

    system_aliases:
      debug_print = "R: system_aliases for $local_part@$domain"
      driver = redirect
      domains = $primary_hostname
      data = ${lookup{$local_part}lsearch{/etc/aliases}}

    # Aliases for local mailboxes
    virtual_alias:
        debug_print = "R: virtual_alias for $local_part@$domain"
        driver = redirect
        domains = +local_domains
        allow_fail
        allow_defer
        # Lookup the mailbox which we route the message to
        data = R_VIRTUAL_ALIASES_DATA

    virtual_mailbox:
        debug_print = "R: virtual_mailbox for $local_part@$domain"
        driver = accept
        domains = +local_domains
        transport = dovecot_virtual_delivery
        condition = R_VIRTUAL_MAILBOX_CONDITION
                    
    # This router routes to remote hosts over SMTP using a DNS lookup with
    # default options.
    dnslookup:
      debug_print = "R: dnslookup for $local_part@$domain"
      driver = dnslookup
      domains = ! +local_domains
      ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
      cannot_route_message  = Unkown user $local_part in domain $domain
      # Optimization since the dnslookup router is independent of the local part
      same_domain_copy_routing = yes
      transport = remote_smtp
      no_more



#############################################################################
# Transport Configuration

begin transports

    remote_smtp:
        debug_print = "T: remote_smtp for $local_part@$domain"
        driver      = smtp
        hosts_nopass_tls = *
        dkim_domain = DKIM_DOMAIN
        dkim_selector = DKIM_SELECTOR
        dkim_private_key = DKIM_PRIVATE_KEY
        dkim_canon = relaxed
        dkim_strict = 0


    dovecot_virtual_delivery:
        debug_print = "T: dovecot_virtual_delivery for $local_part@$domain"
        driver = pipe
        command = /usr/lib/dovecot/deliver -d $local_part@$domain  -f $sender_address -a $original_local_part@$original_domain
        message_prefix =
        message_suffix =
        delivery_date_add
        envelope_to_add
        return_path_add
        log_output
        user = vmail
        temp_errors = 64 : 69 : 70: 71 : 72 : 73 : 74 : 75 : 78


#############################################################################
# Rewrites/Retries/Authenticatos

begin rewrite


begin retry

    # Retry..   every 10 mins for 2 hours
    # Then..    every hour for 24 hours
    # Finaly..  every 6 hours for 4 days

    # Domain   Error     Retry..     Then..      Finaly..
    *          *         F,2h,10m;   F,24h,1h;   F,4d,6h

begin authenticators

    login:
        driver = dovecot
        public_name = LOGIN
        server_socket = /var/run/dovecot/auth-client
        # setting server_set_id might break several headers in
        # mails sent by authenticated smtp. So be careful.
        server_set_id = $auth1
        client_condition = ${if !eq{$tls_cipher}{}}

    plain:
        driver = dovecot
        public_name = PLAIN
        server_socket = /var/run/dovecot/auth-client
        server_set_id = $auth1
        client_condition = ${if !eq{$tls_cipher}{}}
